/**********************************************************************
 Java CUP specification for a parser for Little programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
       Errors.fatal(0,0, "Syntax error at end of file");
    }
    else {
       Errors.fatal(((TokenVal)currToken.value).linenum,
	            ((TokenVal)currToken.value).charnum,
		    "Syntax error");
    }
    System.exit(-1);
}

:};


/* Terminals (tokens returned by the scanner) */
terminal 	        INT;
terminal 	        VOID;
terminal 	        DBL;
terminal 	        IF;
terminal 	        ELSE;
terminal 	        WHILE;
terminal 	        RETURN;
terminal 	        SCANF;
terminal 	        PRINTF;
terminal 	        INT_FORMAT;
terminal 	        DBL_FORMAT;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal DblLitTokenVal DBLLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal 	        LCURLY;
terminal 	        RCURLY;
terminal 	        LPAREN;
terminal 	        RPAREN;
terminal 	        COMMA;
terminal 	        ASSIGN;
terminal 	        SEMICOLON;
terminal 	        PLUS;
terminal 	        MINUS;
terminal 	        STAR;
terminal 	        DIVIDE;
terminal 	        PLUSPLUS;
terminal 	        MINUSMINUS;
terminal 	        NOT;
terminal 	        AND;
terminal 	        OR;
terminal 	        EQUALS;
terminal 	        NOTEQUALS;
terminal 	        LESS;
terminal 	        GREATER;
terminal 	        LESSEQ;
terminal 	        GREATEREQ;
terminal 	        AMPERSAND;

/* Non-terminals */
non terminal ProgramNode      program;
non terminal LinkedList	      declList;
non terminal DeclNode	      decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode	      type;
non terminal IdNode	      id;
non terminal DeclListNode     varDeclList;
non terminal FnDeclNode       fnDecl;
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList;
//non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal StmtListNode     stmtList;
non terminal StmtNode         stmt;
/*non terminal ExpNode	      exp;
non terminal AssignNode       assign_exp;
non terminal UnaryExpNode     term;
non terminal CallStmtNode     fncall;
non terminal LinkedList       actualList;*/

/* Precedences */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left STAR, DIVIDE;
precedence left NOT, PLUSPLUS, MINUSMINUS;


start with program;

/* grammar with actions
 *
 * NOTE: add more grammar rules below
 */

program		::= declList: d
		{: RESULT = new ProgramNode(new DeclListNode(d));
		:}
		;

declList 	::= declList:dl decl:d
		{: dl.addLast(d);
		   RESULT = dl;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<DeclNode>();
		:}
		;

decl		::= varDecl:v
		{: RESULT = v;
		:}
		| fnDecl:f
		{: RESULT = f;
		:}
		;


varDecl		::= type: t id: i SEMICOLON
		{: RESULT = new VarDeclNode(t, i);
		:}
		;

fnDecl		::= type: t id: i formals: fl fnBody: fb
		{: RESULT = new FnDeclNode(t, i, fl, fb);
		:}
		;

formals         ::= LPAREN RPAREN
		{: RESULT = new FormalsListNode(null);
		:}
		;

fnBody          ::= LCURLY varDeclList: v stmtList: s RCURLY
		{: RESULT = new FnBodyNode(v, s);
		:}
		;

varDeclList     ::= /* epsilon */
		{: RESULT = new DeclListNode(null);
		:}
		;

stmtList        ::= stmtList: sl stmt: s
		{: sl.myStmts.addLast(s);
		   RESULT = sl;
		:} 
		| /* epsilon */
		{: RESULT = new StmtListNode(new LinkedList<StmtNode>());
		:}
		;

stmt		::= PLUSPLUS id: i SEMICOLON
		{: RESULT = new PreIncStmtNode(i);
		:}
		| MINUSMINUS id: i SEMICOLON
		{: RESULT = new PreDecStmtNode(i);
		:}
		| id: i PLUSPLUS SEMICOLON
		{: RESULT = new PostIncStmtNode(i);
		:}
		| id: i MINUSMINUS SEMICOLON
		{: RESULT = new PostDecStmtNode(i);
		:}
		;

type		::= INT
		{: RESULT = new IntNode();
		:}
		| DBL
		{: RESULT = new DblNode();
		:}
		| VOID
		{: RESULT = new VoidNode();
		:}
		;

id              ::= ID:i
		{: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
		:}
		;
