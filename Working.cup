/**********************************************************************
 Java CUP specification for a parser for Little programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
       Errors.fatal(0,0, "Syntax error at end of file");
    }
    else {
       Errors.fatal(((TokenVal)currToken.value).linenum,
	            ((TokenVal)currToken.value).charnum,
		    "Syntax error");
    }
    System.exit(-1);
}

:};


/* Terminals (tokens returned by the scanner) */
terminal 	        INT;
terminal 	        VOID;
terminal 	        DBL;
terminal 	        IF;
terminal 	        ELSE;
terminal 	        WHILE;
terminal 	        RETURN;
terminal 	        SCANF;
terminal 	        PRINTF;
terminal 	        INT_FORMAT;
terminal 	        DBL_FORMAT;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal DblLitTokenVal DBLLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal 	        LCURLY;
terminal 	        RCURLY;
terminal 	        LPAREN;
terminal 	        RPAREN;
terminal 	        COMMA;
terminal 	        ASSIGN;
terminal 	        SEMICOLON;
terminal 	        PLUS;
terminal 	        MINUS;
terminal 	        STAR;
terminal 	        DIVIDE;
terminal 	        PLUSPLUS;
terminal 	        MINUSMINUS;
terminal 	        NOT;
terminal 	        AND;
terminal 	        OR;
terminal 	        EQUALS;
terminal 	        NOTEQUALS;
terminal 	        LESS;
terminal 	        GREATER;
terminal 	        LESSEQ;
terminal 	        GREATEREQ;
terminal 	        AMPERSAND;

/* Non-terminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */

non terminal ProgramNode      program;
non terminal LinkedList	      declList;
non terminal DeclNode	      decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode	      type;
non terminal IdNode	      id;
non terminal FnDeclNode       fnDecl;
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       varDeclList;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal ExpNode	      exp;
non terminal AssignNode       assign_exp;
non terminal UnaryExpNode     term;
non terminal CallStmtNode     fncall
non terminal LinkedList       actualList

/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left STAR, DIVIDE;
precedence left NOT, PLUSPLUS, MINUSMINUS;


start with program;

/* grammar with actions
 *
 * NOTE: add more grammar rules below
 */

program		::= declList: d
		{: RESULT = new ProgramNode(new DeclListNode(d));
		:}
		;

declList 	::= declList:dl decl:d
		{: dl.addLast(d);
		   RESULT = dl;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<DeclNode>();
		:}
		;

decl		::= varDecl:v
		{: RESULT = v;
		:}
		| fnDecl:f
		{: RESULT = f;
		:}
		;

varDeclList     ::= varDeclList: vl varDecl: vd
		{: vl.addLast(vd);
		   RESULT = vl;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<VarDeclNode>();
		:}
		;

varDecl		::= type: t id: i SEMICOLON
		{: RESULT = new VarDeclNode(t, i);
		:}
		;


fnDecl		::= type: t id: i formals: fl fnBody: fb
		{: RESULT = new FnDeclNode(t, i, fl, fb);
		:}
		;

formals		::= LPAREN RPAREN
		{: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
		:}
		| LPAREN formalsList: fl RPAREN
		{: RESULT = new FormalsListNode(fl);
		:}
		;

formalsList	::= formalDecl: fd
		{: RESULT = fd;
		:}
		| formalDecl: fd COMMA formalsList: fl
		{: fl.addLast(fd);
		   RESULT = fl;
		:}
		;

formalDecl      ::= type: t id: i
		{: RESULT = new FormalDeclNode(t, i);
		:}
		;

fnBody          ::= LCURLY varDeclList: v stmtList: s RCURLY
		{: RESULT = new FnBodyNode(v, s);
		:}
		;

stmtList        ::= stmtList: sl stmt: s
		{: sl.addLast(s);
		   RESULT = sl;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<StmtNode>();
		:}
		;

stmt            ::= assign_exp: a SEMICOLON
		{: RESULT = new AssignStmtNode(a);
		:}
		| PLUSPLUS id: i SEMICOLON
		{: RESULT = new PreIncStatement(i);
		:}
		| MINUSMINUS id: i SEMICOLON
		{: RESULT = new PreDecStmtNode(i);
		:}
		| id: i PLUSPLUS SEMICOLON
		{: RESULT = new PostIncStmtNode(i);
		:}
		| id: i MINUSMINUS SEMICOLON
		{: RESULT = new PostDecStmtNode(i);
		:}
		| SCANF LPAREN INT_FORMAT COMMA AMPERSAND id: i RPAREN SEMICOLON
		{: RESULT = new ReadIntStmtNode(i);
		:}
		| SCANF LPAREN DBL_FORMAT COMMA AMPERSAND id: i RPAREN SEMICOLON
		{: RESULT = new ReadDblStmtNode(i);
		:}
		| PRINTF LPAREN INT_FORMAT COMMA exp: e RPAREN SEMICOLON
		{: RESULT = new WriteInteStmtNode(e);
		:}
		| PRINTF LPAREN DBL_FORMAT COMMA exp: e RPAREN SEMICOLON
		{: RESULT = new WriteDblStmtNode(e);
		:}
		| PRINTF LPAREN STRINGLITERAL: s RPAREN SEMICOLON
		{: RESULT = new WriteStrStrStmtNode(new StringLitNode(s.lineNum, s.charNum, s.strVal));
		:}
		| IF LPAREN exp: e RPAREN LCURLY varDeclList: vl stmtList: sl RCURLY
		{: RESULT = new IfStmtNode(e, vl, sl);
		:}
		| IF LPAREN exp: e RPAREN LCURLY varDeclList: vl stmtList: sl RCURLY ELSE LCURLY varDeclList: vl2 stmtList: sl2 RCURLY
		{: RESULT = new IfElseStmtNode(e, vl, sl, vl2, sl2);
		:}
		| WHILE LPAREN exp: e RPAREN LCURLY varDeclList: vl stmtList: sl RCURLY
		{: RESULT = new WhileStmtNode(e, vl, sl);
		:}
		| RETURN exp: e SEMICOLON
		{: RESULT = new ReturnStmtNode(e);
		:}
		| RETURN SEMICOLON
		{: RESULT = new ReturnStmtNode();
		:}
		| fncall: f SEMICOLON
		{: RESULT = new CallStmtNode(f);
		:}
		;

fncall		::=  id: i LPAREN RPAREN   // fn call with no args
	        {: RESULT = new CallExpNode(i, LinkedList<ExpNode>());
		:}
		| id: i LPAREN actualList: al RPAREN  // with args
		{: RESULT = new CallExpNode(i, al);
		:}
	 	;

exp		::= assign_exp: a
		{: RESULT =  a;
		:}
		| exp: e1 PLUS exp: e2
		{: RESULT = new PlusNode(e1, e2);
		:}
	        | exp: e1 MINUS exp: e2
	        {: RESULT = new MinusNode(e1, e2);
		:}
		| exp: e1 STAR exp: e2
	        {: RESULT = new TimesNode(e1, e2);
		:}
		| exp: e1 DIVIDE exp: e2
		{: RESULT = new DivideNode(e1, e2);
		:}	        
		| NOT exp: e
		{: RESULT = new NotNode(e);
		:}	        
		| exp: e1 AND exp: e2
		{: RESULT = new AndNode(e1, e2);
		:}	        
		| exp: e1 OR exp: e2
		{: RESULT = new OrNode(e1, e2);
		:}		
		| exp: e1 EQUALS exp: e2
		{: RESULT = new EqualsNode(e1, e2);
		:}		
		| exp: e1 NOTEQUALS exp: e2
		{: RESULT = new NotEqualsNode(e1, e2);
		:}		
		| exp: e1 LESS exp: e2
		{: RESULT = new LessNode(e1, e2);
		:}		
		| exp: e1 GREATER exp: e2
		{: RESULT = new GreaterNode(e1, e2);
		:}
		| exp: e1 LESSEQ exp: e2
		{: RESULT = new LessEqNode(e1, e2);
		:}		
		| exp: e1 GREATEREQ exp: e2
		{: RESULT = new GreaterEqNode(e1, e2);
		:}		
		| MINUS term: t
		{: RESULT = new UnaryMinusNode(t);
		:}		
		| term: t
		{: RESULT = new UnaryExpNode(t);
		:}		
		;

assign_exp	::= id ASSIGN exp
		{: RESULT = new AssignNode(id, exp);
		:}
		;

term		::= id: i
		{: RESULT = i;
		:}
		| id: i PLUSPLUS
		{: RESULT = new PlusPlusNode(i);
		:}		
		| id: i MINUSMINUS
		{: RESULT = new MinusMinusNode(i);
		:}	        
		| INTLITERAL: i
		{: RESULT = new IntLitNode(i.lineNum, i.charNum, i.intVal);
		:}	        
		| DBLLITERAL: d
		{: RESULT = new DblLitNode(d.lineNum, d.charNum, d.dblVal);
		:}	        
		| STRINGLITERAL: s
		{: RESULT = new StringLitNode(s.lineNum, s.charNum, s.strVal);
		:}	        
		| LPAREN exp: e RPAREN
		{: RESULT = e;
		:}		
		| fncall: f
		{: RESULT = new CallStmtNode(f);
		:}		
		;

actualList      ::= exp: e
		{: RESULT = e;
		:}
		| actualList: al COMMA exp: e
		{: al.addLast(e);
		   RESULT = al;
		:}
		;


type		::= INT
		{: RESULT = new IntNode();
		:}
		| DBL
		{: RESULT = new DblNode();
		:}
		| VOID
		{: RESULT = new VoidNode();
		:}
		;

id              ::= ID:i
		{: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
		:}
		;
